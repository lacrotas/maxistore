import { useState } from "react";
import "./Order.scss";
import { FaUser, FaPhone, FaMapMarkerAlt, FaTruck, FaMoneyBillWave, FaComment, FaCheckCircle } from "react-icons/fa";

function Order({ value, onOrderComplete, closeModal }) {
    const [step, setStep] = useState(1);
    const [formData, setFormData] = useState({
        name: '',
        phone: '',
        address: '',
        delivery: '–°–∞–º–æ–≤—ã–≤–æ–∑',
        payment: '–ö–∞—Ä—Ç–æ–π',
        comment: ''
    });
    const [errors, setErrors] = useState({});
    const [isSuccess, setIsSuccess] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
        if (errors[name]) {
            setErrors(prev => ({ ...prev, [name]: '' }));
        }
    };

    const validateStep = (currentStep) => {
        const newErrors = {};

        if (currentStep === 1) {
            if (!formData.name.trim()) newErrors.name = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û';
            if (!formData.phone.trim()) newErrors.phone = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
        }

        if (currentStep === 2 && formData.delivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && !formData.address.trim()) {
            newErrors.address = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const nextStep = () => {
        if (validateStep(step)) {
            setStep(step + 1);
        }
    };

    const prevStep = () => {
        setStep(step - 1);
    };

    const handleSubmit = async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —à–∞–≥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        let isValid = true;
        for (let i = 1; i <= 3; i++) {
            isValid = isValid && validateStep(i);
        }

        if (!isValid) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            await sendTelegramNotification(formData, value);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
            await sendEmailNotification(formData, value);

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            onOrderComplete();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—Ö–∞
            setIsSuccess(true);

            console.log('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:', formData, value);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    };

    function generateEmailHtml(orderData, items) {
        const itemsHtml = items.map(item =>
            `<tr>
                <td style="padding: 8px; border-bottom: 1px solid #eee;">${item.name}</td>
                <td style="padding: 8px; border-bottom: 1px solid #eee; text-align: center;">${item.quantity} —à—Ç.</td>
                <td style="padding: 8px; border-bottom: 1px solid #eee; text-align: right;">${item.price * item.quantity} —Ä—É–±</td>
            </tr>`
        ).join('');

        const total = items.reduce((sum, item) => sum + (Number(item.price) * item.quantity), 0);
        const deliveryCost = orderData.delivery === '–î–æ—Å—Ç–∞–≤–∫–∞' ? 10 : 0;
        const totalWithDelivery = total + deliveryCost;

        return `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; color: #333;">
                <h1 style="color: #2c3e50; text-align: center;">üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</h1>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #eee;">
                    <h2 style="color: #2c3e50; margin-top: 0;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
                    <p><strong>üë§ –ö–ª–∏–µ–Ω—Ç:</strong> ${orderData.name}</p>
                    <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${orderData.phone}</p>
                    <p><strong>üìç –ê–¥—Ä–µ—Å:</strong> ${orderData.delivery === '–°–∞–º–æ–≤—ã–≤–æ–∑' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : orderData.address}</p>
                    <p><strong>üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${orderData.delivery}</p>
                    <p><strong>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${orderData.payment}</p>
                    <p><strong>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${orderData.comment || '–Ω–µ—Ç'}</p>
                </div>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #eee;">
                    <h2 style="color: #2c3e50; margin-top: 0;">üõí –¢–æ–≤–∞—Ä—ã</h2>
                    <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                        <thead>
                            <tr style="border-bottom: 1px solid #ddd;">
                                <th style="text-align: left; padding: 8px;">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th style="text-align: center; padding: 8px;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                <th style="text-align: right; padding: 8px;">–°—É–º–º–∞</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHtml}
                        </tbody>
                    </table>
                </div>
                
                <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; border: 1px solid #d1e7ff;">
                    <h3 style="color: #2c3e50; margin-top: 0;">üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</h3>
                    <p><strong>–¢–æ–≤–∞—Ä—ã:</strong> ${total} —Ä—É–±</p>
                    <p><strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> ${deliveryCost} —Ä—É–±</p>
                    <p style="font-size: 1.1em;"><strong>–í—Å–µ–≥–æ:</strong> ${totalWithDelivery} —Ä—É–±</p>
                </div>
                
                <p style="font-size: 0.9em; color: #7f8c8d; text-align: center; margin-top: 20px;">
                    –≠—Ç–æ –ø–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ
                </p>
            </div>
        `;
    }

    async function sendEmailNotification(orderData, items) {
        try {
            const response = await fetch(`${process.env.REACT_APP_API_URL}api/order/send-order`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderData,
                    items,
                    subject: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${orderData.name}`,
                    html: generateEmailHtml(orderData, items)
                })
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞');
            }

            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', {
                message: error.message,
                stack: error.stack
            });
            throw error;
        }
    }

    async function sendTelegramNotification(orderData, items) {
        const botToken = '7446774548:AAH86Pusw8ggo7zlVKtW5fcj2FrQ4kmasQM';
        const chatId = '1035534494';

        const itemsText = items.map(item => {
            return `- ${item.name} (${item.quantity} —à—Ç.): ${item.price * item.quantity} —Ä—É–±`;
        }).join('\n');

        const total = items.reduce((sum, item) => {
            return sum + (Number(item.price) * item.quantity);
        }, 0);

        const message = `
            üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
            
            üë§ *–ö–ª–∏–µ–Ω—Ç*: ${orderData.name}
            üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${orderData.phone}
            üìç *–ê–¥—Ä–µ—Å*: ${orderData.delivery === '–°–∞–º–æ–≤—ã–≤–æ–∑' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : orderData.address}
            üöö *–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏*: ${orderData.delivery}
            üí≥ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*: ${orderData.payment}
            üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: ${orderData.comment || '–Ω–µ—Ç'}

            üõí *–¢–æ–≤–∞—Ä—ã*:
            ${itemsText}

            üí∞ *–ò—Ç–æ–≥–æ*: ${total} —Ä—É–±
        `;

        try {
            await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: message,
                    parse_mode: 'Markdown'
                })
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        }
    }

    const closeSuccessModal = () => {
        setIsSuccess(false);
        closeModal();
    };

    return (
        <div className="order-modal">
            {/* Success Modal */}
            {isSuccess && (
                <div className="success-modal-overlay">
                    <div className="success-modal">
                        <FaCheckCircle className="success-icon" />
                        <h2 className="success-title">–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h2>
                        <p className="success-message">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
                        <button className="success-btn" onClick={closeSuccessModal}>
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                </div>
            )}

            <div className="order-header">
                <h2 className="order-title title_bold">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
                <div className="order-steps">
                    <div className={`step ${step >= 1 ? 'active' : ''}`}>
                        <span className="step-number">1</span>
                        <span className="step-label common_reg">–ö–æ–Ω—Ç–∞–∫—Ç—ã</span>
                    </div>
                    <div className="step-connector"></div>
                    <div className={`step ${step >= 2 ? 'active' : ''}`}>
                        <span className="step-number">2</span>
                        <span className="step-label common_reg">–î–æ—Å—Ç–∞–≤–∫–∞</span>
                    </div>
                    <div className="step-connector"></div>
                    <div className={`step ${step >= 3 ? 'active' : ''}`}>
                        <span className="step-number">3</span>
                        <span className="step-label common_reg">–û–ø–ª–∞—Ç–∞</span>
                    </div>
                </div>
            </div>

            <div className="order-body">
                {/* –®–∞–≥ 1: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
                {step === 1 && (
                    <div className="form-section">
                        <div className="input-group">
                            <label className="input-label">
                                <FaUser className="input-icon" />
                                <span className="title_bold">–§–ò–û</span>
                            </label>
                            <input
                                type="text"
                                name="name"
                                value={formData.name}
                                onChange={handleChange}
                                className={`form-input common_reg ${errors.name ? 'error' : ''}`}
                                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                                required
                            />
                            {errors.name && <span className="error-message">{errors.name}</span>}
                        </div>

                        <div className="input-group">
                            <label className="input-label">
                                <FaPhone className="input-icon" />
                                <span className="title_bold">–¢–µ–ª–µ—Ñ–æ–Ω</span>
                            </label>
                            <input
                                type="tel"
                                name="phone"
                                value={formData.phone}
                                onChange={handleChange}
                                className={`form-input common_reg ${errors.phone ? 'error' : ''}`}
                                placeholder="+375 (__) ___ __ __"
                                required
                            />
                            {errors.phone && <span className="error-message">{errors.phone}</span>}
                        </div>
                    </div>
                )}

                {/* –®–∞–≥ 2: –î–æ—Å—Ç–∞–≤–∫–∞ */}
                {step === 2 && (
                    <div className="form-section">
                        <div className="select-group">
                            <label className="input-label">
                                <FaTruck className="input-icon" />
                                <span className="title_bold title_bold">–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</span>
                            </label>
                            <select
                                name="delivery"
                                value={formData.delivery}
                                onChange={handleChange}
                                className="form-select common_reg"
                            >
                                <option value="–°–∞–º–æ–≤—ã–≤–æ–∑" className="common_reg">–°–∞–º–æ–≤—ã–≤–æ–∑ (—É–ª. –°—Ç–µ–±–µ–Ω–µ–≤–∞ 2–ê)</option>
                                <option value="–î–æ—Å—Ç–∞–≤–∫–∞" className="common_reg">–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</option>
                            </select>
                        </div>

                        {formData.delivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && (
                            <div className="input-group">
                                <label className="input-label">
                                    <FaMapMarkerAlt className="input-icon" />
                                    <span className="title_bold">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</span>
                                </label>
                                <input
                                    type="text"
                                    name="address"
                                    value={formData.address}
                                    onChange={handleChange}
                                    className={`form-input common_reg ${errors.address ? 'error' : ''}`}
                                    placeholder="–≥. –ú–∏–Ω—Å–∫, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1"
                                />
                                {errors.address && <span className="error-message">{errors.address}</span>}
                            </div>
                        )}

                        <div className="input-group">
                            <label className="input-label">
                                <FaComment className="input-icon" />
                                <span className="title_bold">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</span>
                            </label>
                            <textarea
                                name="comment"
                                value={formData.comment}
                                onChange={handleChange}
                                className="form-textarea"
                                placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                                rows="3"
                            />
                        </div>
                    </div>
                )}

                {/* –®–∞–≥ 3: –û–ø–ª–∞—Ç–∞ */}
                {step === 3 && (
                    <div className="form-section">
                        <div className="select-group">
                            <label className="input-label">
                                <FaMoneyBillWave className="input-icon" />
                                <span className="title_bold">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</span>
                            </label>
                            <select
                                name="payment"
                                value={formData.payment}
                                onChange={handleChange}
                                className="form-select common_reg"
                            >
                                <option value="–ö–∞—Ä—Ç–æ–π common_reg">–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω</option>
                                <option value="–ù–∞–ª–∏—á–Ω—ã–º–∏ common_reg">–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</option>
                            </select>
                        </div>

                        <div className="order-summary">
                            <div className="summary-row">
                                <span className="common_reg">–¢–æ–≤–∞—Ä—ã ({value.reduce((sum, item) => sum + item.quantity, 0)})</span>
                                <span className="common_reg">
                                    {value.reduce((sum, item) => sum + (Number(item.price) * item.quantity), 0)} —Ä—É–±
                                </span>
                            </div>
                            <div className="summary-row">
                                <span className="common_reg">–î–æ—Å—Ç–∞–≤–∫–∞</span>
                                <span className="common_reg">{formData.delivery === '–°–∞–º–æ–≤—ã–≤–æ–∑' ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : '10 —Ä—É–±'}</span>
                            </div>
                            <div className="summary-row total">
                                <span className="common_reg">–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</span>
                                <span className="common_reg">
                                    {formData.delivery === '–°–∞–º–æ–≤—ã–≤–æ–∑'
                                        ? `${value.reduce((sum, item) => sum + (Number(item.price) * item.quantity), 0)} —Ä—É–±`
                                        : `${value.reduce((sum, item) => sum + (Number(item.price) * item.quantity), 0) + 10} —Ä—É–±`}
                                </span>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            <div className="order-footer">
                {step > 1 && (
                    <button className="nav-btn prev-btn" onClick={prevStep}>
                        –ù–∞–∑–∞–¥
                    </button>
                )}

                {step < 3 ? (
                    <button className="nav-btn next-btn" onClick={nextStep}>
                        –î–∞–ª–µ–µ
                    </button>
                ) : (
                    <button className="submit-btn" onClick={handleSubmit}>
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
                        <span className="btn-arrow">‚Üí</span>
                    </button>
                )}
            </div>
        </div>
    )
}

export default Order;